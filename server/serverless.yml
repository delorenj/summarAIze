org: delorenj
app: summaraize
service: summaraize
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs14.x
  stage: dev
  region: us-east-1
  environment:
    OPENAI_API_KEY: ${param:openaiApiKey}
    stripeSecretKey: ${param:stripeSecretKey}
    booksTableName: ${self:custom.stage}-books
    usersTableName: ${self:custom.stage}-users
    jobsTableName: ${self:custom.stage}-summaryjobs

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:DescribeTable
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          # Restrict our IAM role permissions to
          # the specific table for the stage
          Resource:
            - arn:aws:dynamodb:us-east-1:350692246643:table/${self:custom.stage}-books
            - arn:aws:dynamodb:us-east-1:350692246643:table/${self:custom.stage}-users
            - arn:aws:dynamodb:us-east-1:350692246643:table/${self:custom.stage}-summaryjobs
        - Effect: Allow
          Action:
            - s3:ListBucket
            - s3:ListObjects
          Resource:
            - arn:aws:s3:::summaraize-book/*
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:GetObject
            - s3:DeleteObject
          Resource:
            - arn:aws:s3:::summaraize-book/*
plugins:
  - serverless-bundle
  - serverless-s3-local
  - serverless-offline
  - serverless-lift
custom:
  stage: ${opt:stage, self:provider.stage}
  bundle:
    includeModules: true
    sourcemaps: false
    externals:
      - fork-pdf-parse-with-pagepertext
      - pdf-parse

constructs:
    summaryQueue:
        type: queue
        worker:
            handler: summaryQueue.handler
resources:
  - ${file(resources/api-gateway-errors.yml)}
  - ${file(resources/cognito-authorizer.yml)}
#  - ${file(resources/dynamodb-table.yml)}
#  - ${file(resources/s3.yml)}
#  - ${file(resources/cognito-user-pool.yml)}
#  - ${file(resources/cognito-identity-pool.yml)}

functions:
  onS3Upload:
    handler: book.onUpload
    events:
      - s3:
          bucket: summaraize-book
          event: s3:ObjectCreated:*
          existing: true
  s3SignedUrl:
    handler: s3SignedUrl.getUploadUrl
    events:
      - http:
          path: /signed/upload
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  parseAllBooks:
    handler: book.parseAllBooks
    timeout: 300

  parseBookMetadata:
    handler: book.parseBookMetadata
    events:
      - http:
          path: /book/metadata
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  getUserJobs:
    handler: user.getJobs
    events:
      - http:
          path: /user/jobs
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  getUserData:
    handler: user.getData
    events:
      - http:
          path: /user
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  publishSummaryJob:
    handler: summarize.publishSummaryJob
    environment:
      QUEUE_URL: ${construct:summaryQueue.queueUrl}
    events:
      - http:
          path: /summarize
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  billing:
    handler: billing.main
    events:
      - http:
          path: billing
          cors: true
          method: post
          authorizer: aws_iam
